<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ssh防爆破</title>
    <link href="/2022/08/27/ssh%E9%98%B2%E7%88%86%E7%A0%B4/"/>
    <url>/2022/08/27/ssh%E9%98%B2%E7%88%86%E7%A0%B4/</url>
    
    <content type="html"><![CDATA[<h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><ul><li>不同系统间存在差异</li><li>例如：centos系统7和8<figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">]<span class="hljs-comment"># cat /etc/centos-release</span><br>CentOS Linux release 7.6.1810 (Core)<br><br>]<span class="hljs-comment"># ls /etc/hosts.deny</span><br>/etc/hosts.deny  <span class="hljs-comment"># 可以理解为ssh登录黑名单文件，8版本没有</span><br><br><span class="hljs-comment"># 文件记录格式：</span><br>sshd: ipaddr<br></code></pre></td></tr></table></figure></li></ul><h3 id="x2F-var-x2F-log-x2F-secure-记录ssh登录失败的IP，过滤100条看看"><a href="#x2F-var-x2F-log-x2F-secure-记录ssh登录失败的IP，过滤100条看看" class="headerlink" title="&#x2F;var&#x2F;log&#x2F;secure 记录ssh登录失败的IP，过滤100条看看"></a>&#x2F;var&#x2F;log&#x2F;secure 记录ssh登录失败的IP，过滤100条看看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">]<span class="hljs-comment"># tail -n 100 /var/log/secure  | awk &#x27;/Failed password/&#123;print $0&#125;&#x27;</span><br>Mar 18 23:04:37 centos sshd[31222]: Failed password <span class="hljs-keyword">for</span> invalid user zywang from 165.232.124.55 port 48182 ssh2<br>Mar 18 23:04:37 centos sshd[31225]: Failed password <span class="hljs-keyword">for</span> invalid user zyx from 165.232.124.55 port 48214 ssh2<br>Mar 18 23:04:37 centos sshd[31233]: Failed password <span class="hljs-keyword">for</span> invalid user zz from 165.232.124.55 port 48342 ssh2<br>Mar 18 23:04:37 centos sshd[31228]: Failed password <span class="hljs-keyword">for</span> invalid user zyx from 165.232.124.55 port 48246 ssh2<br>Mar 18 23:04:38 centos sshd[31235]: Failed password <span class="hljs-keyword">for</span> invalid user zzwang from 165.232.124.55 port 48374 ssh2<br>Mar 18 23:04:38 centos sshd[31221]: Failed password <span class="hljs-keyword">for</span> invalid user zyliu from 165.232.124.55 port 48150 ssh2<br>Mar 18 23:04:38 centos sshd[31231]: Failed password <span class="hljs-keyword">for</span> invalid user zy from 165.232.124.55 port 48310 ssh2<br>Mar 18 23:04:38 centos sshd[31238]: Failed password <span class="hljs-keyword">for</span> invalid user zzy from 165.232.124.55 port 48438 ssh2<br>Mar 18 23:04:39 centos sshd[31242]: Failed password <span class="hljs-keyword">for</span> invalid user zz from 165.232.124.55 port 48502 ssh2<br>Mar 18 23:04:40 centos sshd[31240]: Failed password <span class="hljs-keyword">for</span> invalid user zzy from 165.232.124.55 port 48470 ssh2<br></code></pre></td></tr></table></figure><h3 id="ssh防爆破脚本"><a href="#ssh防爆破脚本" class="headerlink" title="ssh防爆破脚本"></a>ssh防爆破脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># ssh 防爆破,登录失败超过3次就禁止登录</span><br><span class="hljs-built_in">set</span> -e<br><br>secure_file=($(<span class="hljs-built_in">ls</span> /var/log/secure* | grep -v <span class="hljs-string">&quot;gz$&quot;</span>))<br>sfn=<span class="hljs-variable">$&#123;#secure_file[@]&#125;</span><br>logfile=<span class="hljs-string">&quot;/tmp/tmp.txt&quot;</span><br><br><span class="hljs-keyword">for</span> ((file=0;file&lt;<span class="hljs-string">&quot;<span class="hljs-variable">$sfn</span>&quot;</span>;file++))<br>  <span class="hljs-keyword">do</span><br>    awk <span class="hljs-string">&#x27;/Invalid user/&#123;print $(NF-2)&#125;&#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;secure_file[file]&#125;</span>&quot;</span> | awk <span class="hljs-string">&#x27;&#123;ip[$1]++;&#125;END&#123;for(i in ip)&#123;print ip[i],i&#125;&#125;&#x27;</span> | awk <span class="hljs-string">&#x27;$1&gt;3&#123;print $0&#125;&#x27;</span> &gt;&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$logfile</span>&quot;</span><br><span class="hljs-keyword">done</span><br><br>[ -s <span class="hljs-string">&quot;<span class="hljs-variable">$logfile</span>&quot;</span> ] &amp;&amp; <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> count sship<br>  <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> [ $(grep -c <span class="hljs-string">&quot;sshd:<span class="hljs-variable">$sship</span>&quot;</span> /etc/hosts.deny) -eq 0 ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;sshd:<span class="hljs-variable">$sship</span>&quot;</span> &gt;&gt; /etc/hosts.deny<br>        time=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d %H:%M&quot;</span>)<br>        curl -s --retry 3 https://cip.cc/<span class="hljs-variable">$sship</span> | grep -E <span class="hljs-string">&quot;IP|运营商|数据二|数据三&quot;</span> | awk -v time=<span class="hljs-string">&quot;<span class="hljs-variable">$time</span>&quot;</span> -v count=<span class="hljs-string">&quot;<span class="hljs-variable">$count</span>&quot;</span> <span class="hljs-string">&#x27;BEGIN&#123;print &quot;===============================&quot;;print &quot;时间    :&quot;,time;print &quot;次数    :&quot;,count&#125;$3!=&quot;&quot;&#123;print $0&#125;END&#123;print &quot;备注    ：已限制ssh连接&quot;&#125;&#x27;</span> | sed <span class="hljs-string">&#x27;s/数据二/地址一/&#x27;</span> | sed <span class="hljs-string">&#x27;s/数据三/地址二/&#x27;</span>  &gt;&gt; /tmp/sshd.log<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span> &lt;  <span class="hljs-string">&quot;<span class="hljs-variable">$logfile</span>&quot;</span><br>&gt; <span class="hljs-string">&quot;<span class="hljs-variable">$logfile</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="给脚本加上执行权限"><a href="#给脚本加上执行权限" class="headerlink" title="给脚本加上执行权限"></a>给脚本加上执行权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">]<span class="hljs-comment"># chmod +x secure.sh</span><br></code></pre></td></tr></table></figure><h3 id="放入cron-计划任务里"><a href="#放入cron-计划任务里" class="headerlink" title="放入cron 计划任务里"></a>放入cron 计划任务里</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">*/60 * * * * root /usr/bin/sh  /opt/secure.sh  <span class="hljs-comment"># 一个小时执行一次</span><br></code></pre></td></tr></table></figure><h3 id="测试一段时间的效果"><a href="#测试一段时间的效果" class="headerlink" title="测试一段时间的效果"></a>测试一段时间的效果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">]<span class="hljs-comment"># cat /tmp/ssh.log</span><br>===============================<br>时间    : 2022-02-16 17:43<br>次数    : 2274<br>IP      : 159.89.224.4<br>运营商  : digitalocean.com<br>地址一  : 美国 | 纽约DigitalOcean数据中心<br>地址二  : 美国纽约纽约<br>备注    ：已限制ssh连接<br>===============================<br>时间    : 2022-02-16 17:43<br>次数    : 4639<br>IP      : 206.189.190.8<br>运营商  : digitalocean.com<br>地址一  : 美国<br>地址二  : 美国纽约纽约<br>备注    ：已限制ssh连接<br>===============================<br>时间    : 2022-03-03 00:01<br>次数    : 15371<br>IP      : 137.184.230.247<br>地址一  : 美国<br>地址二  : 美国俄亥俄辛辛那提<br>备注    ：已限制ssh连接<br>===============================<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>shell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx-reload原理</title>
    <link href="/2022/08/27/nginx-reload%E5%8E%9F%E7%90%86/"/>
    <url>/2022/08/27/nginx-reload%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="nginx-s-reload-原理"><a href="#nginx-s-reload-原理" class="headerlink" title="nginx -s reload  原理"></a>nginx -s reload  原理</h2><ul><li>执行这条命令的是希望nginx不停止服务的情况下把旧的nginx配置文件内容平滑的更新为新的配置文件内容。</li></ul><h2 id="nginx-s-reload-流程"><a href="#nginx-s-reload-流程" class="headerlink" title="nginx -s reload 流程"></a>nginx -s reload 流程</h2><ul><li>因为启动nginx服务有两个进程,一个是master进程，一个是worker进程</li><li>worker 进程 是由nginx配置文件的worker_processes配置参数控制的，表示CPU处理核数<figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">[1] 向master 进程发送 HUP 信号 <br>[2] master 进程校验nginx配置文件语法是否正确<br>[3] master 进程打开新的监听端口<br>[4] master 进程用新的nginx配置启动新的 worker 子进程<br>[5] master 进程向老的 worker 子进程 发送 QUIT 信号<br>[6] 老的 worker 子进程关闭监听句柄，处理完当前连接后结束进程<br></code></pre></td></tr></table></figure></li></ul><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><pre><code class=" mermaid">flowchart TD    a([正在运行的nginx服务])    a1[master进程\nWorker进程]    b[修改nginx配置文件]    c[尝试配置,尝试打开日志文件,\n尝试分配新的监听端口]    d&#123;是否成功&#125;    d1[回滚配置]    d2[使用新的配置,新建一个Worker进程,\n新建成功后发送一个关闭消息给旧的Worker进程]    e[旧的Worker进程 收到信号后会继续服务,\n当所有请求的客户端被服务后,旧进程关闭]    f([结束])    a --&gt;|启动| a1    a --&gt;|update| b --&gt; c --&gt; d    d --&gt;|否| d1 --&gt; f     d --&gt;|是|d2 --&gt; e --&gt; f</code></pre>]]></content>
    
    
    <categories>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/26/hello-world/"/>
    <url>/2022/08/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>session与cookie详解</title>
    <link href="/2022/01/30/session%E4%B8%8Ecookie%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/01/30/session%E4%B8%8Ecookie%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Session与Cookie详解"><a href="#Session与Cookie详解" class="headerlink" title="Session与Cookie详解"></a>Session与Cookie详解</h1><h2 id="session-与-cookie-是什么？"><a href="#session-与-cookie-是什么？" class="headerlink" title="session 与 cookie 是什么？"></a>session 与 cookie 是什么？</h2><ul><li>session 与cookie 是属于一种会话控制技术，常用在身份识别，登录验证，数据传输等。</li><li>举个例子：就像我们去超市买东西结账的时候，我们要拿出我们的会员卡才会获取优惠.这时候，我们怎么识别这个会员卡真实有效的呢?当我们将会员号给到收银员，收银员根据我们提供的会员号，输入到系统中，系统根据这个会员号去查询，如果查询到了就证明这个会员号是真实存在的.这里的会员号就好比cookie与session.会员系统就好比服务器端，收银员就好比客户端.</li></ul><h2 id="为什么会用到session与cookie？"><a href="#为什么会用到session与cookie？" class="headerlink" title="为什么会用到session与cookie？"></a>为什么会用到session与cookie？</h2><ul><li>这里有必要了解一下http应用传输协议的特点了。由于http协议是无状态的，即浏览器去请求了一个网页，这时候就是一个http请求，当服务端接收到请求之后，返回客户端需要的数据，在这过程中浏览器与服务器是建立了一个连接的。但是当服务端返回数据，客户端收到数据之后，他们的这种连接关系就断开了。下次浏览器再去发送请求的时候，又是重新建立一个连接，这两个链接没有任何关系。试想一下，当我们登录一个商场系统的时候，进入首页做了登录操作，但是我们下单或者加入购物车的时候，还需要登录，每访问一个页面就要登录，是不是很繁琐同时也是很不科学的，万一我们加入购物车的商品，我们点击下单了，下单页面要登录而且还无法正确的反馈出你下单时的那些商品。</li></ul><h2 id="Http特点"><a href="#Http特点" class="headerlink" title="Http特点"></a>Http特点</h2><ul><li>http协议支持客户端&#x2F;服务端模式，也是一种请求&#x2F;响应模式的协议。</li><li>无连接。所谓的无连接就是服务器收到了客户端的请求之后，响应完成并收到客户端的应答之后，即断开连接。限制每次的连接只处理一次请求。从而节省传输时间。</li><li>无状态。http协议对事务的处理没有记忆能力。也就意味着如果需要前面的信息，只能重传，这无形之中增加数据的传输量。这种方式某种方面上讲解放了服务器，但是却不利于客户端与服务器的连接。为了弥补这种不足，产生了两项记录http状态的技术，一个叫做Cookie,一个叫做Session</li><li>简单快捷：所谓的简单快捷是指客户端向服务器请求服务时，一般来说只需要传输请求方法和路径，就能进行访问</li><li>灵活：这里主要指的是客户端可以通过http协议传输任意类型的数据。比如传输.jpg文件、.ppt文件等等，只需要设定content-type就可以进行传输。</li></ul><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><ul><li>Session是指一个终端用户与交互系统进行通信的时间间隔，通常指从注册进入系统到注销退出系统之间所经过的时间。以及如果需要的话，可能还有一定的操作空间。</li><li>一个Session的概念需要包括特定的客户端，特定的服务器端以及不中断的操作时间。A用户和C服务器建立连接时所处的Session同B用户和C服务器建立连接时所处的Session是两个不同的Session。</li></ul><h3 id="Session的工作原理"><a href="#Session的工作原理" class="headerlink" title="Session的工作原理"></a>Session的工作原理</h3><ul><li>当一个session第一次被启用时，一个独一的标识被存储于本地的cookie中.</li><li>首先使用session_start()函数，PHP从session仓库中加载已经存储的session变量。</li><li>当执行PHP脚本时，通过使用session_register()函数注册session变量。</li><li>当PHP脚本执行结束时，未被销毁的session变量会被自动保存在本地一定路径下的session库中，这个路径可以通过php.ini文件中的session.save_path指定，下次浏览网页时可以加载使用。</li></ul><h3 id="Session的运行原理"><a href="#Session的运行原理" class="headerlink" title="Session的运行原理"></a>Session的运行原理</h3><ul><li>客户端向服务端发起请求，建立通信</li><li>服务端根据设置的Session创建指令，在服务端创建一个编号为SessionID的文件，里面的值就是Session具体的值(组成部分 变量名 | 类型 :长度:值).</li><li>服务端将创建好的sessionid编号响应给客户端，客户则将该编号存在cookie中(一般我们在浏览器存储的调试栏中会发现cookie中有一个PHPSESSID的键，这就是SessionID，当然这个名称，我可以通过设置服务端是可以改变的).</li><li>当下一次请求时，客户端将这个sessionid携带在请求中，发送给服务端，服务端根据这个sessionid来做一些业务判断.</li></ul><h3 id="Session的存储机制"><a href="#Session的存储机制" class="headerlink" title="Session的存储机制"></a>Session的存储机制</h3><ul><li>存储方式: session默认是文件存储的.我们可以通过php.ini的配置来设置存储驱动传送门。</li><li>生命周期: 当我们未设置session的生命周期时，当浏览器关闭之后存储在客户端的phpsessid自动消失，因为它是存在内存，下次建立连接的时候会重新创建一个phpsessid.之前的session，PHP会自动的根据垃圾回收机制自动删除.这里我们可以根据session_set_cookie_params($expire)函数来设置一个生命周期.</li></ul><h3 id="Session的使用场景"><a href="#Session的使用场景" class="headerlink" title="Session的使用场景"></a>Session的使用场景</h3><ul><li>用户身份识别</li><li>数据传输</li><li>登录控制(是否登录,单点登录)</li></ul><h3 id="Session的特点"><a href="#Session的特点" class="headerlink" title="Session的特点:"></a>Session的特点:</h3><ul><li>不是线程安全的，应该避免多个线程共享同一个Session实例；</li><li>Session实例是轻量级的，所谓轻量级：是指他的创建和删除不需要消耗太多资源；</li><li>Session对象内部有一个缓存，被称为Hibernate第一缓存，他存放被当前工作单元中加载的对象，每个Session实例都有自己的缓存。</li></ul><h3 id="Session的注意事项"><a href="#Session的注意事项" class="headerlink" title="Session的注意事项"></a>Session的注意事项</h3><ul><li>安全性: sessionid是按照一定的算法生成，要保证session的值唯一性和随机性</li><li>客户端禁用cookie，根据上面session的运行原理可以得出，session的存储于传送还是依赖于客户端，因此当客户端禁用cookie时，客户端是无法保存PHPSESSID的，这时候可以通过url重写或者表单来实现session的传输.</li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ul><li>cookie是远程浏览器存储数据以此追踪用户和识别用户的的机制，从实现来说，cookie是存储在客户端上的一个数据片段(即保存在客户机中的一个简单的文本文件)</li></ul><h3 id="Cookie-1"><a href="#Cookie-1" class="headerlink" title="Cookie"></a>Cookie</h3><ul><li>客户端向服务端发起一个http请求.</li><li>服务端设置一个创建cookie的指令，响应给客户端</li><li>客户端收到服务端响应的指令，根据指令在客户端创建一个cookie</li><li>当下一次请求时，客户端携带这个cookie向服务端发送请求.</li></ul><h3 id="存储机制"><a href="#存储机制" class="headerlink" title="存储机制"></a>存储机制</h3><ul><li>cookie在客户端存储的形式有三种,不同的浏览器的存储机制不同，存的cookie也不同。<ul><li>文件存储: 浏览器会针对不同的域，在磁盘的对应目录创建一个单独的文件，来存储该域下面的cookie值.</li><li>内存存储: 当浏览器关闭时，该cookie随之消失.根据下面的创建语法，当我们未设置过期时间时则会出现这种情况</li><li>flash存储: 这种存储方式是永久存储在磁盘中，即使通过浏览器删除一些数据都是无法删除该方式存储的cookie，如果需要删除，可能通过磁盘的方式</li></ul></li></ul><h3 id="Cokie的应用"><a href="#Cokie的应用" class="headerlink" title="Cokie的应用"></a>Cokie的应用</h3><ul><li>用户身份识别</li><li>数据传输</li><li>登录控制(是否登录、单点登录)</li></ul><h2 id="Session与Cookie的区别"><a href="#Session与Cookie的区别" class="headerlink" title="Session与Cookie的区别"></a>Session与Cookie的区别</h2><ul><li>Session存储在服务端，Cookie存储在客户端。</li><li>Cookie的创建指令由服务端设置</li><li>Session的SessionID需要客户端存储</li></ul><h2 id="cookie与session的几个误区"><a href="#cookie与session的几个误区" class="headerlink" title="cookie与session的几个误区"></a>cookie与session的几个误区</h2><h3 id="客户端禁止cookie，session无法使用？"><a href="#客户端禁止cookie，session无法使用？" class="headerlink" title="客户端禁止cookie，session无法使用？"></a>客户端禁止cookie，session无法使用？</h3><ul><li>使用url重写或者表单提交可以实现.</li></ul><h3 id="session和cookie的安全性比较，session存在客户端安全更高"><a href="#session和cookie的安全性比较，session存在客户端安全更高" class="headerlink" title="session和cookie的安全性比较，session存在客户端安全更高?"></a>session和cookie的安全性比较，session存在客户端安全更高?</h3><ul><li>由于cookie是存在客户端的，相对来说安全性是要低一些，不过在创建的时候可以设置$httpOnly值.</li><li>由于cookie与session是相互关联的，获取到cookie一定程度上获取到了session，同样可以操作session.</li></ul><h3 id="cookie与session是不是在浏览器关闭的时候会消失"><a href="#cookie与session是不是在浏览器关闭的时候会消失" class="headerlink" title="cookie与session是不是在浏览器关闭的时候会消失?"></a>cookie与session是不是在浏览器关闭的时候会消失?</h3><ul><li>这需要查看存储机制了。cookie可以存文件，内存，flash.存内存当然浏览器关闭则消失了；session由于垃圾回收机制，当在垃圾回收机制内是不会删除的，除非你代码中显示的做了删除操作.</li></ul><h3 id="cookie是存储在客户端中，如何增加其安全性"><a href="#cookie是存储在客户端中，如何增加其安全性" class="headerlink" title="cookie是存储在客户端中，如何增加其安全性?"></a>cookie是存储在客户端中，如何增加其安全性?</h3><ul><li>我们可以在设置cookie的时候，增加一些特殊参数，如客户端信息ip、浏览器信息等.</li></ul><h3 id="当cookie存在客户端的文件中，是不是每个浏览器获取到这个文件都可以进行操作"><a href="#当cookie存在客户端的文件中，是不是每个浏览器获取到这个文件都可以进行操作" class="headerlink" title="当cookie存在客户端的文件中，是不是每个浏览器获取到这个文件都可以进行操作?"></a>当cookie存在客户端的文件中，是不是每个浏览器获取到这个文件都可以进行操作?</h3><ul><li>要看浏览器之间对cookie的管理机制是不是一样.</li></ul>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云端IDE</title>
    <link href="/2021/12/07/code-server/"/>
    <url>/2021/12/07/code-server/</url>
    
    <content type="html"><![CDATA[<h1 id="code-server简介"><a href="#code-server简介" class="headerlink" title="code-server简介"></a>code-server简介</h1><ul><li>vscode 是一款轻量级但功能强大的源代码编辑器,适用于 Windows、macOS 和 Linux。</li><li>支持C++、C#、Java、Python、PHP、Go等等众多语言。</li><li>致力于在任何地方的任何机器上运行VS Code并在浏览器中访问它。</li><li>官方文档：<a href="https://coder.com/docs/code-server/latest">code-server</a></li><li>软件包：<a href="https://github.com/cdr/code-server/releases">code-server</a></li></ul><h2 id="服务器要求"><a href="#服务器要求" class="headerlink" title="服务器要求"></a>服务器要求</h2><ul><li>1 GB 内存</li><li>2 个 CPU 内核</li><li>环境必须启用 WebSockets，因为代码服务器使用 WebSockets 在浏览器和服务器之间进行通信。</li></ul><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><ul><li>读取：3000 IOPS，50 MB&#x2F;s</li><li>写入：3000 IOPS 50 MB&#x2F;s</li></ul><h2 id="部署云端code-server"><a href="#部署云端code-server" class="headerlink" title="部署云端code-server"></a>部署云端code-server</h2><h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> /etc/redhat-release <br>CentOS Linux release 7.6.1810 (Core)<br></code></pre></td></tr></table></figure><h3 id="用户环境"><a href="#用户环境" class="headerlink" title="用户环境"></a>用户环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">]<span class="hljs-comment"># useradd code</span><br>]<span class="hljs-comment"># echo &quot;password&quot; | passwd --stdin code    #&quot;password&quot; 为code用户登录密码</span><br></code></pre></td></tr></table></figure><h3 id="部署nginx环境"><a href="#部署nginx环境" class="headerlink" title="部署nginx环境"></a>部署nginx环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## nginx repo 源</span><br>]<span class="hljs-comment"># vim /etc/yum.repos.d/nginx.repo </span><br>[nginx]<br>name=nginx repo<br>baseurl=http://nginx.org/packages/centos/7/<span class="hljs-variable">$basearch</span>/<br>gpgcheck=0<br>enabled=1<br>---------------------------------------------------------<br>]<span class="hljs-comment"># yum repolist</span><br><br><span class="hljs-comment">## 安装nginx </span><br>]<span class="hljs-comment"># yum -y install nginx</span><br><br><span class="hljs-comment">## 转发配置</span><br>]<span class="hljs-comment"># vim /etc/nginx/conf.d/default.conf</span><br><br>server &#123;<br>    listen        80;<br>    listen       443 ssl;<br>    server_name  domain;<br>    ssl_certificate cert/cert-file-name.pem;  <span class="hljs-comment">#需要将cert-file-name.pem替换成已上传的证书文件的名称。</span><br>    ssl_certificate_key cert/cert-file-name.key; <span class="hljs-comment">#需要将cert-file-name.key替换成已上传的证书私钥文件的名称。</span><br>    ssl_session_timeout 5m;<br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>    <span class="hljs-comment">#表示使用的加密套件的类型。</span><br>    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; <span class="hljs-comment">#表示使用的TLS协议的类型。</span><br>    ssl_prefer_server_ciphers on;<br><br>    <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$server_port</span> = <span class="hljs-string">&quot;80&quot;</span> ) &#123;<br>      rewrite ^(/.*)$ https://$host<span class="hljs-variable">$1</span>  permanent;<br>    &#125;<br><br>    location / &#123;<br>    proxy_pass http://localhost:8080;<br>    proxy_set_header Host <span class="hljs-variable">$host</span>;<br>    proxy_set_header Upgrade <span class="hljs-variable">$http_upgrade</span>;  <span class="hljs-comment"># 设置websocket</span><br>    proxy_set_header Connection upgrade; <br>    proxy_set_header Accept-Encoding gzip;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">## 检查配置文件语法</span><br>]<span class="hljs-comment"># nginx -t</span><br>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok<br>nginx: configuration file /etc/nginx/nginx.conf <span class="hljs-built_in">test</span> is successful<br></code></pre></td></tr></table></figure><h3 id="开始部署code-server"><a href="#开始部署code-server" class="headerlink" title="开始部署code-server"></a>开始部署code-server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换普通用户</span><br>]<span class="hljs-comment"># su - code</span><br><br><span class="hljs-comment"># 下载软件包</span><br>]$ wget https://github.com/cdr/code-server/releases/download/v3.12.0/code-server-3.12.0-linux-amd64.tar.gz<br><br><span class="hljs-comment"># 解包</span><br>]$ tar xf code-server-3.12.0-linux-amd64.tar.gz &amp;&amp; <span class="hljs-built_in">mv</span> code-server-3.12.0-linux-amd64  code-server &amp;&amp; <span class="hljs-built_in">cd</span> code-server/<br><br><span class="hljs-comment"># 编辑配置文件</span><br>]$ vim config.yaml<br>bind-addr: 127.0.0.1:8080<br>auth: password<br>password: [password]  <span class="hljs-comment"># 此处为code-server登录密码</span><br>cert: <span class="hljs-literal">false</span><br><br>]$ <span class="hljs-built_in">logout</span>    <span class="hljs-comment"># 退出普通用户环境</span><br></code></pre></td></tr></table></figure><h3 id="配置code-server服务"><a href="#配置code-server服务" class="headerlink" title="配置code-server服务"></a>配置code-server服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">]<span class="hljs-comment"># vim /usr/lib/systemd/system/code-server.service</span><br><br>[Unit]<br>Description=code-server<br>Documentation=https://docs.cloudreve.org<br>After=network.target<br>Wants=network.target<br><br>[Service]<br>ExecStart=/home/code/code-server/bin/code-server  --config=/home/code/code-server/config.yaml<br>Restart=on-abnormal<br>RestartSec=5s<br>KillMode=mixed<br><br>StandardOutput=null<br>StandardError=syslog<br><br>[Install]<br>WantedBy=multi-user.target<br><br>]<span class="hljs-comment"># systemctl daemon-reload  # 加载服务配置</span><br></code></pre></td></tr></table></figure><h3 id="添加sudo提权"><a href="#添加sudo提权" class="headerlink" title="添加sudo提权"></a>添加sudo提权</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">]<span class="hljs-comment"># vim /etc/sudoers</span><br>code    ALL=(ALL)  /bin/systemctl, /bin/netstat, /bin/ps, /usr/sbin/nginx<br></code></pre></td></tr></table></figure><h3 id="切换普通用户起服务"><a href="#切换普通用户起服务" class="headerlink" title="切换普通用户起服务"></a>切换普通用户起服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">]<span class="hljs-comment"># su - code</span><br>]$ sudo systemctl start code-server<br>[sudo] password <span class="hljs-keyword">for</span> code:    <span class="hljs-comment"># 此处输入code 用户密码</span><br><br>]$ sudo systemctl <span class="hljs-built_in">enable</span> code-server<br>[sudo] password <span class="hljs-keyword">for</span> code:    <span class="hljs-comment"># 此处输入code 用户密码</span><br><br>]$ sudo nginx<br>[sudo] password <span class="hljs-keyword">for</span> code:    <span class="hljs-comment"># 此处输入code 用户密码</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
